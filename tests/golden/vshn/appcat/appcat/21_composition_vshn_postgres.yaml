apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: '10'
  labels:
    name: vshnpostgres.vshn.appcat.vshn.io
  name: vshnpostgres.vshn.appcat.vshn.io
spec:
  compositeTypeRef:
    apiVersion: vshn.appcat.vshn.io/v1
    kind: XVSHNPostgreSQL
  patchSets:
    - name: annotations
      patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
          type: FromCompositeFieldPath
    - name: labels
      patches:
        - fromFieldPath: metadata.labels
          toFieldPath: metadata.labels
          type: FromCompositeFieldPath
  resources:
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: ''
          providerConfigRef:
            name: kubernetes
      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath

##########################################################################################
#                             Object for storage (S3)
    
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: appcat.vshn.io/v1
              kind: ObjectBucket
              metadata:
                namespace: default
                name: '' #patched
              spec:
                parameters:
                  bucketName: '' #patched
                  region: ch-dk-2
                compositionRef:
                  name: exoscale.objectbuckets.appcat.vshn.io
                writeConnectionSecretToRef:
                  namespace: ''
                  name: '' # patched
          providerConfigRef:
            name: kubernetes

      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: exoscale-s3-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.parameters.bucketName
          transforms:
            - string:
                fmt: exoscale-s3-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.spec.writeConnectionSecretToRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.spec.writeConnectionSecretToRef.name
          type: FromCompositeFieldPath

##########################################################################################
#                         Object to create S3 Storage within this PG Instance
#              see: https://stackgres.io/doc/latest/tutorial/complete-cluster/backup-configuration/


    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: '' # patched
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1beta1
              kind: SGObjectStorage
              metadata:
                namespace: default
                name: test-storage1
              spec:
                type: 's3Compatible'
                s3:
                  bucket: '' # patched
                  awsCredentials:
                    secretKeySelectors:
                      accessKeyId: 
                        name: '' # patched
                        key: 'AWS_ACCESS_KEY_ID'
                      secretAccessKey: 
                        name: '' # patched
                        key: 'AWS_SECRET_ACCESS_KEY'
                  endpoint: https://sos-ch-dk-2.exo.io
          providerConfigRef:
            name: kubernetes
        patches:
          - patchSetName: annotations
            type: PatchSet
          - patchSetName: labels
            type: PatchSet
          # - fromFieldPath: metadata.labels[crossplane.io/composite]
          #   toFieldPath: metadata.name
          #   transforms:
          #     - string:
          #         fmt: vshn-objectstorage-%s
          #       type: string
          #   type: FromCompositeFieldPath
          # - fromFieldPath: metadata.labels[crossplane.io/composite]
          #   toFieldPath: spec.parameters.bucketName
          #   transforms:
          #     - string:
          #         fmt: vshn-objectstorage-%s
          #       type: string
          #   type: FromCompositeFieldPath
          - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
            toFieldPath: spec.forProvider.spec.writeConnectionSecretToRef.namespace
            type: FromCompositeFieldPath
          - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            toFieldPath: spec.forProvider.spec.s3.awsCredentials.secretKeySelectors.accessKeyId.name
            type: FromCompositeFieldPath
          - fromFieldPath: metadata.labels[crossplane.io/claim-name]
            toFieldPath: spec.forProvider.spec.s3.awsCredentials.secretKeySelectors.secretAccessKey.name
            type: FromCompositeFieldPath




##########################################################################################
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGInstanceProfile
              metadata:
                name: ''
                namespace: ''
              spec:
                cpu: ''
                initContainers:
                  cluster-reconciliation-cycle:
                    cpu: 100m
                    memory: 100Mi
                  pgbouncer-auth-file:
                    cpu: 100m
                    memory: 100Mi
                  relocate-binaries:
                    cpu: 100m
                    memory: 100Mi
                  setup-arbitrary-user:
                    cpu: 100m
                    memory: 100Mi
                  setup-scripts:
                    cpu: 100m
                    memory: 100Mi
                memory: ''
          providerConfigRef:
            name: kubernetes
      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-profile'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.memory
          toFieldPath: spec.forProvider.manifest.spec.memory
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.cpu
          toFieldPath: spec.forProvider.manifest.spec.cpu
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGPostgresConfig
              metadata:
                name: ''
                namespace: ''
              spec:
                postgresVersion: ''
                postgresql.conf: {}
          providerConfigRef:
            name: kubernetes
      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-pgconf'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.majorVersion
          toFieldPath: spec.forProvider.manifest.spec.postgresVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.pgSettings
          toFieldPath: spec.forProvider.manifest.spec[postgresql.conf]
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGCluster
              metadata:
                name: ''
                namespace: ''
              spec:
                configurations:
                  sgPostgresConfig: ''
                instances: 1
                pods:
                  persistentVolume:
                    size: ''
                postgres:
                  version: ''
                sgInstanceProfile: ''
          providerConfigRef:
            name: kubernetes
      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cluster'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.disk
          toFieldPath: spec.forProvider.manifest.spec.pods.persistentVolume.size
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.majorVersion
          toFieldPath: spec.forProvider.manifest.spec.postgres.version
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.sgInstanceProfile
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.configurations.sgPostgresConfig
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                name: ''
                namespace: ''
              stringData:
                POSTGRESQL_DB: postgres
                POSTGRESQL_HOST: ''
                POSTGRESQL_PORT: '5432'
                POSTGRESQL_USER: postgres
          providerConfigRef:
            name: kubernetes
          references:
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.superuser-password
                kind: Secret
                name: ''
                namespace: ''
              toFieldPath: data.POSTGRESQL_PASSWORD
      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s.vshn-postgresql-%s.svc.cluster.local'
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.stringData.POSTGRESQL_HOST
          type: CombineFromComposite
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.name
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: ''
        spec:
          forProvider:
            manifest:
              apiVersion: networking.k8s.io/v1
              kind: NetworkPolicy
              metadata:
                name: ''
                namespace: ''
              spec:
                ingress:
                  - from:
                      - namespaceSelector:
                          matchLabels:
                            kubernetes.io/metadata.name: ''
                podSelector: {}
                policyTypes:
                  - Ingress
          providerConfigRef:
            name: kubernetes
      patches:
        - patchSetName: annotations
          type: PatchSet
        - patchSetName: labels
          type: PatchSet
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-network-policy'
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: allow-from-claim-namespace-%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.spec.ingress[0].from[0].namespaceSelector.matchLabels[kubernetes.io/metadata.name]
          type: FromCompositeFieldPath
  writeConnectionSecretsToNamespace: syn-crossplane
