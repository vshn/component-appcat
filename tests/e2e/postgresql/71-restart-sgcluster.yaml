apiVersion: batch/v1
kind: Job
metadata:
  name: restart-sgcluster
  namespace: appcat-e2e
spec:
  backoffLimit: 1
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        e2e-test: postgresql-e2e
    spec:
      containers:
        - name: restart-container
          image: alpine/k8s:1.31.7
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e  # Exit on any error

              echo "=== Finding SGCluster namespace for postgresql-e2e-test from control plane ==="

              # Query control plane cluster explicitly
              COMPOSITE_NAME=$(kubectl --kubeconfig=/configs/control-plane/config get vshnpostgresql postgresql-e2e-test -o jsonpath='{.spec.resourceRef.name}')
              echo "Composite resource name: ${COMPOSITE_NAME}"

              NAMESPACE=$(kubectl --kubeconfig=/configs/control-plane/config get namespace -l appcat.vshn.io/claim-name=postgresql-e2e-test -o jsonpath='{.items[0].metadata.name}')
              echo "SGCluster namespace: ${NAMESPACE}"

              if [ -z "$NAMESPACE" ]; then
                echo "ERROR: Could not find namespace for postgresql-e2e-test"
                exit 1
              fi

              # Check if pods exist before attempting restart
              POD_COUNT=$(kubectl --kubeconfig=/configs/service-cluster/config get pod -n ${NAMESPACE} -l app=StackGresCluster,stackgres.io/cluster-name=${COMPOSITE_NAME} --no-headers 2>/dev/null | wc -l)

              if [ "$POD_COUNT" -eq 0 ]; then
                echo "ERROR: No SGCluster pods found in namespace ${NAMESPACE} with label stackgres.io/cluster-name=${COMPOSITE_NAME}"
                exit 1
              fi

              echo "=== Restarting ${POD_COUNT} SGCluster pod(s) in namespace ${NAMESPACE} on service cluster ==="
              kubectl --kubeconfig=/configs/service-cluster/config delete pod -n ${NAMESPACE} -l app=StackGresCluster,stackgres.io/cluster-name=${COMPOSITE_NAME}

              echo "=== Waiting for SGCluster pods to restart ==="
              kubectl --kubeconfig=/configs/service-cluster/config wait --for=condition=ready pod -n ${NAMESPACE} -l app=StackGresCluster,stackgres.io/cluster-name=${COMPOSITE_NAME} --timeout=300s

              echo "=== SGCluster restarted successfully ==="
          volumeMounts:
            - name: control-plane-config
              mountPath: /configs/control-plane
            - name: service-cluster-config
              mountPath: /configs/service-cluster
      restartPolicy: Never
      volumes:
        - name: control-plane-config
          secret:
            secretName: control-plane-kubeconfig
        - name: service-cluster-config
          secret:
            secretName: service-cluster-kubeconfig
