apiVersion: batch/v1
kind: Job
metadata:
  name: ingress-forgejo-e2e
  namespace: appcat-e2e
spec:
  backoffLimit: 1
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        e2e-test: forgejo-e2e
    spec:
      serviceAccountName: github-ci
      containers:
        - name: test-container
          image: alpine/k8s:1.31.7
          envFrom:
            - secretRef:
                name: forgejo-e2e
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "=== Getting instance details ==="

              INSTANCE_NAMESPACE=$(kubectl -n appcat-e2e get vshnforgejo forgejo-e2e -o jsonpath='{.status.instanceNamespace}')
              COMPOSITE=$(kubectl -n appcat-e2e get vshnforgejo forgejo-e2e -o jsonpath='{.spec.resourceRef.name}')

              if [ -z "$INSTANCE_NAMESPACE" ] || [ -z "$COMPOSITE" ]; then
                echo "ERROR: Could not retrieve instance namespace or composite name"
                exit 1
              fi

              echo "Instance namespace: $INSTANCE_NAMESPACE"
              echo "Composite name: $COMPOSITE"

              # Switch to service cluster for ingress check
              export KUBECONFIG=/configs/service-cluster/config
              echo "=== Creating Forgejo ingress test job in service cluster ==="

              JOB_NAME="forgejo-ingress-test-$(date +%s)"
              cat <<EOF | kubectl apply -f -
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: ${JOB_NAME}
                namespace: appcat-e2e
                labels:
                  app: forgejo-ingress-test
              spec:
                ttlSecondsAfterFinished: 300
                backoffLimit: 3
                template:
                  metadata:
                    labels:
                      app: forgejo-ingress-test
                  spec:
                    restartPolicy: Never
                    serviceAccountName: github-ci
                    containers:
                    - name: forgejo-ingress-test
                      image: alpine/k8s:1.31.7
                      env:
                      - name: INSTANCE_NAMESPACE
                        value: "${INSTANCE_NAMESPACE}"
                      - name: COMPOSITE
                        value: "${COMPOSITE}"
                      command: ["/bin/bash"]
                      args:
                      - -c
                      - |
                        set -exf

                        ns="\$INSTANCE_NAMESPACE"
                        composite="\$COMPOSITE"

                        # Get all hosts from the TLS configuration
                        hosts=\$(kubectl -n "\$ns" get ingress "\${composite}-letsencrypt-ingress" -oyaml | yq -r '.spec.tls.[0].hosts[]')

                        echo "Found hosts:"
                        echo "\$hosts"

                        expected_host="sub1.forgejo-e2e.apps.lab-cloudscale-rma-0.appuio.cloud"

                        if echo "\$hosts" | grep -q "\$expected_host"; then
                          echo "✓ Found expected host: \$expected_host"
                        else
                          echo "✗ Expected host not found: \$expected_host"
                          exit 1
                        fi

                        echo '=== All Forgejo ingress tests passed! ==='
              EOF

              kubectl wait --for=condition=complete --timeout=300s job/${JOB_NAME} -n appcat-e2e
              echo "=== Forgejo Ingress Job finished ==="

              # Check job status and show logs
              kubectl logs job/${JOB_NAME} -n appcat-e2e

              if kubectl get job ${JOB_NAME} -n appcat-e2e -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep -q "True"; then
                echo "=== Forgejo ingress tests completed successfully ==="
              else
                echo "=== Forgejo ingress tests failed ==="
                kubectl describe job ${JOB_NAME} -n appcat-e2e
                exit 1
              fi
          volumeMounts:
            - name: service-cluster-config
              mountPath: /configs/service-cluster
      restartPolicy: Never
      volumes:
        - name: service-cluster-config
          secret:
            secretName: service-cluster-kubeconfig
