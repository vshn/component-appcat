apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: '10'
    metadata.appcat.vshn.io/description: PostgreSQLRestore instances by VSHN
    metadata.appcat.vshn.io/displayname: PostgreSQLRestore by VSHN
    metadata.appcat.vshn.io/end-user-docs-url: https://vs.hn/vshn-postgresqlrestore
    metadata.appcat.vshn.io/flavor: standalone
    metadata.appcat.vshn.io/plans: '{"plus-2":{"note":"Will be scheduled on APPUiO
      Cloud plus nodes","scheduling":{"nodeSelector":{"appuio.io/node-class":"plus"}},"size":{"cpu":"400m","disk":"20Gi","enabled":true,"memory":"1728Mi"}},"plus-4":{"note":"Will
      be scheduled on APPUiO Cloud plus nodes","scheduling":{"nodeSelector":{"appuio.io/node-class":"plus"}},"size":{"cpu":"900m","disk":"40Gi","enabled":true,"memory":"3776Mi"}},"standard-2":{"size":{"cpu":"400m","disk":"20Gi","enabled":true,"memory":"1728Mi"}},"standard-4":{"size":{"cpu":"900m","disk":"40Gi","enabled":true,"memory":"3776Mi"}}}'
    metadata.appcat.vshn.io/product-description: https://products.docs.vshn.ch/products/appcat/postgresqlrestore.html
    metadata.appcat.vshn.io/zone: rma1
  labels:
    metadata.appcat.vshn.io/offered: 'false'
    metadata.appcat.vshn.io/serviceID: vshn-postgresqlrestore
    name: vshnpostgresrestore.vshn.appcat.vshn.io
  name: vshnpostgresrestore.vshn.appcat.vshn.io
spec:
  compositeTypeRef:
    apiVersion: vshn.appcat.vshn.io/v1
    kind: XVSHNPostgreSQL
  functions:
    - config:
        apiVersion: v1
        data:
          emailAlertingEnabled: 'true'
          emailAlertingSecretName: mailgun-smtp-credentials
          emailAlertingSecretNamespace: syn-appcat
          emailAlertingSmtpFromAddress: myuser@example.com
          emailAlertingSmtpHost: smtp.eu.mailgun.org:465
          emailAlertingSmtpUsername: myuser@example.com
          externalDatabaseConnectionsEnabled: 'true'
          imageTag: v4.41.1
          quotasEnabled: 'false'
          sgNamespace: stackgres
          sideCars: '{"clusterController": {"limits": {"cpu": "32m", "memory": "2Gi"},
            "requests": {"cpu": "32m", "memory": "30Mi"}}, "createBackup": {"limits":
            {"cpu": "400m", "memory": "500Mi"}, "requests": {"cpu": "100m", "memory":
            "64Mi"}}, "envoy": {"limits": {"cpu": "64m", "memory": "64Mi"}, "requests":
            {"cpu": "32m", "memory": "64Mi"}}, "pgbouncer": {"limits": {"cpu": "32m",
            "memory": "20Mi"}, "requests": {"cpu": "16m", "memory": "4Mi"}}, "postgresUtil":
            {"limits": {"cpu": "20m", "memory": "20Mi"}, "requests": {"cpu": "10m",
            "memory": "4Mi"}}, "prometheusPostgresExporter": {"limits": {"cpu": "150m",
            "memory": "256Mi"}, "requests": {"cpu": "10m", "memory": "16Mi"}}, "runDbops":
            {"limits": {"cpu": "250m", "memory": "256Mi"}, "requests": {"cpu": "100m",
            "memory": "64Mi"}}, "setDbopsResult": {"limits": {"cpu": "250m", "memory":
            "256Mi"}, "requests": {"cpu": "100m", "memory": "64Mi"}}}'
        kind: ConfigMap
        metadata:
          labels:
            name: xfn-config
          name: xfn-config
      container:
        image: postgresql
        imagePullPolicy: IfNotPresent
        runner:
          endpoint: unix-abstract:crossplane/fn/default.sock
        timeout: 20s
      name: pgsql-func
      type: Container
  resources:
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  appcat.vshn.io/claim-namespace: ''
                  appcat.vshn.io/servicename: postgresql-standalone
                  appcat.vshn.io/sla: ''
                  appuio.io/billing-name: appcat-postgresql
                  appuio.io/no-rbac-creation: 'true'
                  appuio.io/organization: vshn
                name: ''
          managementPolicy: Observe
          providerConfigRef:
            name: kubernetes
      name: ns-observer
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: ns-observer-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: status.atProvider.manifest.metadata.labels[appuio.io/organization]
          toFieldPath: metadata.labels[appuio.io/organization]
          type: ToCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  appcat.vshn.io/claim-namespace: ''
                  appcat.vshn.io/servicename: postgresql-standalone
                  appcat.vshn.io/sla: ''
                  appuio.io/billing-name: appcat-postgresql
                  appuio.io/no-rbac-creation: 'true'
                  appuio.io/organization: vshn
                name: ''
          providerConfigRef:
            name: kubernetes
      name: namespace-conditions
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.namespaceConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.name
          toFieldPath: status.instanceNamespace
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.labels[appcat.vshn.io/claim-namespace]
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.serviceLevel
          toFieldPath: spec.forProvider.manifest.metadata.labels[appcat.vshn.io/sla]
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[appuio.io/organization]
          toFieldPath: spec.forProvider.manifest.metadata.labels[appuio.io/organization]
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: appcat:services:read
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: appcat:services:read
              subjects:
                - apiGroup: rbac.authorization.k8s.io
                  kind: Group
                  name: organization
          providerConfigRef:
            name: kubernetes
      name: namespace-permissions
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-service-rolebinding'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[appuio.io/organization]
          toFieldPath: spec.forProvider.manifest.subjects[0].name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Issuer
              metadata:
                name: ''
                namespace: ''
              spec:
                selfSigned:
                  crlDistributionPoints: []
          providerConfigRef:
            name: kubernetes
      name: local-ca
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.localCAConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-localca'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: ''
                namespace: ''
              spec:
                dnsNames:
                  - vshn.appcat.vshn.ch
                duration: 87600h
                isCA: false
                issuerRef:
                  group: cert-manager.io
                  kind: Issuer
                  name: ''
                privateKey:
                  algorithm: RSA
                  encoding: PKCS1
                  size: 4096
                renewBefore: 2400h
                secretName: tls-certificate
                subject:
                  organizations:
                    - vshn-appcat
                usages:
                  - server auth
                  - client auth
          providerConfigRef:
            name: kubernetes
      name: certificate
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.certificateConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-certificate'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.issuerRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: batch/v1
              kind: Job
              metadata:
                namespace: syn-appcat-control
              spec:
                template:
                  spec:
                    containers:
                      - args:
                          - |
                            #!/bin/sh

                            set -e

                            xrdname=$(kubectl -n "${CLAIM_NAMESPACE}" get vshnpostgresqls "${CLAIM_NAME}" -ojson | jq -r '.spec.resourceRef.name')

                            source_namespace=$(kubectl -n "${CLAIM_NAMESPACE}" get vshnpostgresqls "${CLAIM_NAME}" -ojson | jq -r '.status.instanceNamespace')

                            echo "copy secret"
                            kubectl -n "${source_namespace}" get secret "pgbucket-${xrdname}" -ojson | jq 'del(.metadata.namespace) | del(.metadata.ownerReferences)' | kubectl -n "${TARGET_NAMESPACE}" apply -f -
                            echo "copy sgObjectStorage"
                            kubectl -n "${source_namespace}" get sgobjectstorages.stackgres.io "sgbackup-${xrdname}" -ojson | jq 'del(.metadata.namespace) | del(.metadata.ownerReferences)' | kubectl -n "$TARGET_NAMESPACE" apply -f -
                            echo "copy sgBackup"
                            kubectl -n "${source_namespace}" get sgbackups.stackgres.io "${BACKUP_NAME}" -ojson | jq '.spec.sgCluster = .metadata.namespace + "." + .spec.sgCluster | del(.metadata.namespace) | del(.metadata.ownerReferences)' | kubectl -n "${TARGET_NAMESPACE}" apply -f -
                        command:
                          - sh
                          - -c
                        env:
                          - name: CLAIM_NAMESPACE
                          - name: CLAIM_NAME
                          - name: BACKUP_NAME
                          - name: TARGET_NAMESPACE
                        image: bitnami/kubectl:latest
                        name: copyjob
                    restartPolicy: Never
                    serviceAccountName: copyserviceaccount
                    ttlSecondsAfterFinished: 100
          providerConfigRef:
            name: kubernetes
      name: copy-job
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-copyjob'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-copyjob'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[0].value
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.restore.claimName
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[1].value
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.restore.backupName
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[2].value
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[3].value
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGInstanceProfile
              metadata: {}
              spec:
                containers:
                  backup.create-backup:
                    cpu: 400m
                    memory: 500Mi
                  cluster-controller:
                    cpu: 32m
                    memory: 2Gi
                  dbops.run-dbops:
                    cpu: 250m
                    memory: 256Mi
                  dbops.set-dbops-result:
                    cpu: 250m
                    memory: 256Mi
                  envoy:
                    cpu: 64m
                    memory: 64Mi
                  pgbouncer:
                    cpu: 32m
                    memory: 20Mi
                  postgres-util:
                    cpu: 20m
                    memory: 20Mi
                  prometheus-postgres-exporter:
                    cpu: 150m
                    memory: 256Mi
                cpu: ''
                initContainers:
                  cluster-reconciliation-cycle:
                    cpu: 300m
                    memory: 200Mi
                  dbops.set-dbops-running:
                    cpu: 250m
                    memory: 256Mi
                  pgbouncer-auth-file:
                    cpu: 300m
                    memory: 500Mi
                  relocate-binaries:
                    cpu: 300m
                    memory: 500Mi
                  setup-arbitrary-user:
                    cpu: 300m
                    memory: 500Mi
                  setup-scripts:
                    cpu: 300m
                    memory: 500Mi
                memory: ''
                requests:
                  containers:
                    backup.create-backup:
                      cpu: 100m
                      memory: 64Mi
                    cluster-controller:
                      cpu: 32m
                      memory: 30Mi
                    dbops.run-dbops:
                      cpu: 100m
                      memory: 64Mi
                    dbops.set-dbops-result:
                      cpu: 100m
                      memory: 64Mi
                    envoy:
                      cpu: 32m
                      memory: 64Mi
                    pgbouncer:
                      cpu: 16m
                      memory: 4Mi
                    postgres-util:
                      cpu: 10m
                      memory: 4Mi
                    prometheus-postgres-exporter:
                      cpu: 10m
                      memory: 16Mi
                  cpu: null
                  initContainers:
                    cluster-reconciliation-cycle:
                      cpu: 100m
                      memory: 100Mi
                    dbops.set-dbops-running:
                      cpu: 250m
                      memory: 256Mi
                    pgbouncer-auth-file:
                      cpu: 100m
                      memory: 100Mi
                    relocate-binaries:
                      cpu: 100m
                      memory: 100Mi
                    setup-arbitrary-user:
                      cpu: 100m
                      memory: 500Mi
                    setup-scripts:
                      cpu: 100m
                      memory: 500Mi
                  memory: null
          providerConfigRef:
            name: kubernetes
      name: profile
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.profileConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-profile'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.manifest.spec.cpu
          transforms:
            - map:
                plus-2: 400m
                plus-4: 900m
                standard-2: 400m
                standard-4: 900m
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.manifest.spec.memory
          transforms:
            - map:
                plus-2: 1728Mi
                plus-4: 3776Mi
                standard-2: 1728Mi
                standard-4: 3776Mi
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.memory
          toFieldPath: spec.forProvider.manifest.spec.memory
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.cpu
          toFieldPath: spec.forProvider.manifest.spec.cpu
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.requests.memory
          toFieldPath: spec.forProvider.manifest.spec.requests.memory
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.requests.cpu
          toFieldPath: spec.forProvider.manifest.spec.requests.cpu
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGPostgresConfig
              metadata: {}
              spec:
                postgresVersion: ''
                postgresql.conf: {}
          providerConfigRef:
            name: kubernetes
      name: pg-conf
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.pgconfigConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-pgconf'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.majorVersion
          toFieldPath: spec.forProvider.manifest.spec.postgresVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.pgSettings
          toFieldPath: spec.forProvider.manifest.spec[postgresql.conf]
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1
              kind: SGCluster
              metadata: {}
              spec:
                configurations:
                  backups:
                    - cronSchedule: ''
                      retention: 6
                      sgObjectStorage: ''
                  sgPostgresConfig: ''
                instances: 1
                nonProductionOptions:
                  enableSetClusterCpuRequests: true
                  enableSetClusterMemoryRequests: true
                  enableSetPatroniCpuRequests: true
                  enableSetPatroniMemoryRequests: true
                pods:
                  persistentVolume:
                    size: ''
                  resources:
                    enableClusterLimitsRequirements: true
                postgres:
                  ssl:
                    certificateSecretKeySelector:
                      key: tls.crt
                      name: tls-certificate
                    enabled: true
                    privateKeySecretKeySelector:
                      key: tls.key
                      name: tls-certificate
                  version: ''
                sgInstanceProfile: ''
          providerConfigRef:
            name: kubernetes
          references:
            - dependsOn:
                apiVersion: stackgres.io/v1
                kind: SGBackup
      name: cluster
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.pgclusterConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cluster'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.manifest.spec.pods.persistentVolume.size
          transforms:
            - map:
                plus-2: 20Gi
                plus-4: 40Gi
                standard-2: 20Gi
                standard-4: 40Gi
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.disk
          toFieldPath: spec.forProvider.manifest.spec.pods.persistentVolume.size
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.manifest.spec.pods.scheduling.nodeSelector
          transforms:
            - map:
                plus-2:
                  appuio.io/node-class: plus
                plus-4:
                  appuio.io/node-class: plus
                standard-2: {}
                standard-4: {}
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.scheduling.nodeSelector
          toFieldPath: spec.forProvider.manifest.spec.pods.scheduling.nodeSelector
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.majorVersion
          toFieldPath: spec.forProvider.manifest.spec.postgres.version
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.sgInstanceProfile
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.configurations.sgPostgresConfig
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.configurations.backups[0].sgObjectStorage
          transforms:
            - string:
                fmt: sgbackup-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.backup.schedule
          toFieldPath: spec.forProvider.manifest.spec.configurations.backups[0].cronSchedule
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.backup.retention
          toFieldPath: spec.forProvider.manifest.spec.configurations.backups[0].retention
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.restore.backupName
          toFieldPath: spec.forProvider.manifest.spec.initialData.restore.fromBackup.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.restore.recoveryTimeStamp
          toFieldPath: spec.forProvider.manifest.spec.initialData.restore.fromBackup.pointInTimeRecovery.restoreToTimestamp
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].dependsOn.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.restore.backupName
          toFieldPath: spec.references[0].dependsOn.name
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata: {}
              stringData:
                POSTGRESQL_DB: postgres
                POSTGRESQL_HOST: ''
                POSTGRESQL_PORT: '5432'
                POSTGRESQL_USER: postgres
          providerConfigRef:
            name: kubernetes
          references:
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.superuser-password
                kind: Secret
                name: ''
                namespace: ''
              toFieldPath: data.POSTGRESQL_PASSWORD
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[ca.crt]
                kind: Secret
                name: tls-certificate
                namespace: ''
              toFieldPath: data[ca.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.crt]
                kind: Secret
                name: tls-certificate
                namespace: ''
              toFieldPath: data[tls.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.key]
                kind: Secret
                name: tls-certificate
                namespace: ''
              toFieldPath: data[tls.key]
          writeConnectionSecretToRef:
            name: ''
            namespace: ''
      connectionDetails:
        - fromConnectionSecretKey: ca.crt
          name: ca.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.crt
          name: tls.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.key
          name: tls.key
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_URL
          name: POSTGRESQL_URL
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_DB
          name: POSTGRESQL_DB
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_HOST
          name: POSTGRESQL_HOST
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PORT
          name: POSTGRESQL_PORT
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_USER
          name: POSTGRESQL_USER
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PASSWORD
          name: POSTGRESQL_PASSWORD
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: LOADBALANCER_IP
          name: LOADBALANCER_IP
          type: FromConnectionSecretKey
      name: connection
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.secretConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s.vshn-postgresql-%s.svc.cluster.local'
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.stringData.POSTGRESQL_HOST
          type: CombineFromComposite
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[1].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[2].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[3].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: appcat.vshn.io/v1
        kind: XObjectBucket
        metadata: {}
        spec:
          parameters:
            bucketName: ''
            region: us-east-1
          writeConnectionSecretToRef:
            name: ''
            namespace: ''
      name: pg-bucket
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.objectBackupConfigConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.parameters.bucketName
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: pgbucket-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: stackgres.io/v1beta1
              kind: SGObjectStorage
              metadata:
                name: ''
                namespace: ''
              spec:
                s3Compatible:
                  awsCredentials:
                    secretKeySelectors:
                      accessKeyId:
                        key: AWS_ACCESS_KEY_ID
                        name: ''
                      secretAccessKey:
                        key: AWS_SECRET_ACCESS_KEY
                        name: ''
                  bucket: ''
                  enablePathStyleAddressing: true
                  endpoint: http://minio-server.minio:9000
                  region: us-east-1
                type: s3Compatible
          providerConfigRef:
            name: kubernetes
      name: sg-backup
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.objectBucketConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-object-storage'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: sgbackup-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.s3Compatible.bucket
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.spec.writeConnectionSecretToRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.name
          transforms:
            - string:
                fmt: pgbucket-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.name
          transforms:
            - string:
                fmt: pgbucket-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: monitoring.coreos.com/v1
              kind: PodMonitor
              metadata:
                name: postgresql-podmonitor
              spec:
                podMetricsEndpoints:
                  - port: pgexporter
                selector:
                  matchLabels:
                    app: StackGresCluster
          providerConfigRef:
            name: kubernetes
      name: podmonitor
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-podmonitor'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels[stackgres.io/cluster-name]
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.namespaceSelector.matchNames[0]
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: monitoring.coreos.com/v1
              kind: PrometheusRule
              metadata:
                name: postgresql-rules
              spec:
                groups:
                  - name: postgresql-storage
                    rules:
                      - alert: PostgreSQLPersistentVolumeFillingUp
                        annotations:
                          description: The volume claimed by the instance {{ $labels.name
                            }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace
                            }} is only {{ $value | humanizePercentage }} free.
                          runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
                          summary: PersistentVolume is filling up.
                        expr: label_replace( bottomk(1, (kubelet_volume_stats_available_bytes{job="kubelet",
                          metrics_path="/metrics"} / kubelet_volume_stats_capacity_bytes{job="kubelet",
                          metrics_path="/metrics"}) < 0.03 and kubelet_volume_stats_used_bytes{job="kubelet",
                          metrics_path="/metrics"} > 0 unless on(namespace, persistentvolumeclaim)
                          kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"}
                          == 1 unless on(namespace, persistentvolumeclaim) kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"}
                          == 1) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-postgresql-(.+)-.+")
                        for: 1m
                        labels:
                          severity: critical
                          syn_team: schedar
                      - alert: PostgreSQLPersistentVolumeFillingUp
                        annotations:
                          description: Based on recent sampling, the volume claimed
                            by the instance {{ $labels.name }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace
                            }} is expected to fill up within four days. Currently
                            {{ $value | humanizePercentage }} is available.
                          runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
                          summary: PersistentVolume is filling up.
                        expr: label_replace( bottomk(1, (kubelet_volume_stats_available_bytes{job="kubelet",
                          metrics_path="/metrics"} / kubelet_volume_stats_capacity_bytes{job="kubelet",
                          metrics_path="/metrics"}) < 0.15 and kubelet_volume_stats_used_bytes{job="kubelet",
                          metrics_path="/metrics"} > 0 and predict_linear(kubelet_volume_stats_available_bytes{job="kubelet",
                          metrics_path="/metrics"}[6h], 4 * 24 * 3600) < 0  unless
                          on(namespace, persistentvolumeclaim) kube_persistentvolumeclaim_access_mode{
                          access_mode="ReadOnlyMany"} == 1 unless on(namespace, persistentvolumeclaim)
                          kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"}
                          == 1) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-postgresql-(.+)-.+")
                        for: 1h
                        labels:
                          severity: warning
                  - name: postgresql-memory
                    rules:
                      - alert: PostgreSQLMemoryCritical
                        annotations:
                          description: |-
                            The memory claimed by the instance {{ $labels.name }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace }} has been over 85% for 2 hours.
                              Please reducde the load of this instance, or increase the memory.
                          summary: Memory usage critical
                        expr: label_replace( topk(1, (container_memory_working_set_bytes{container="patroni"}  /
                          on(container,pod,namespace)  kube_pod_container_resource_limits{resource="memory"}
                          * 100) > 85) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-postgresql-(.+)-.+")
                        for: 120m
                        labels:
                          severity: critical
                          syn_team: schedar
                  - name: postgresql-connections
                    rules:
                      - alert: PostgreSQLConnectionsCritical
                        annotations:
                          description: |-
                            The number of connections to the instance {{ $labels.name }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace }} have been over 90% of the configured connections for 2 hours.
                              Please reduce the load of this instance.
                          summary: Connection usage critical
                        expr: label_replace( topk(1, sum(pg_stat_activity_count) by
                          (pod, namespace) > 90/100 * sum(pg_settings_max_connections)
                          by (pod, namespace)) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-postgresql-(.+)-.+")
                        for: 120m
                        labels:
                          severity: critical
                          syn_team: schedar
                  - name: postgresql-replication
                    rules:
                      - alert: PostgreSQLReplicationCritical
                        annotations:
                          description: The number of replicas for the instance {{
                            $labels.cluster_name }} in namespace {{ $labels.namespace
                            }}. Please check pod counts in affected namespace.
                          runbook_url: https://hub.syn.tools/appcat/runbooks/vshn-postgresql.html#PostgreSQLReplicationCritical
                          summary: Replication status check
                        expr: pg_replication_slots_active == 0
                        for: 10m
                        labels:
                          severity: critical
                          syn_team: schedar
                  - name: postgresql-replication-lag
                    rules:
                      - alert: PostgreSQLReplicationLagCritical
                        annotations:
                          description: Replication lag size on namespace {{$labels.exported_namespace}}
                            instance ({{$labels.application_name}}) is currently {{
                            $value | humanize1024}}B behind the leader.
                          runbook_url: https://hub.syn.tools/appcat/runbooks/vshn-postgresql.html#PostgreSQLReplicationLagCritical
                          summary: Replication lag status check
                        expr: pg_replication_status_lag_size > 1e+09
                        for: 5m
                        labels:
                          severity: critical
                          syn_team: schedar
                  - name: postgresql-replication-count
                    rules:
                      - alert: PostgreSQLPodReplicasCritical
                        annotations:
                          description: Replication is broken in namespace {{$labels.namespace}},
                            check statefulset ({{$labels.statefulset}}).
                          runbook_url: https://hub.syn.tools/appcat/runbooks/vshn-postgresql.html#PostgreSQLPodReplicasCritical
                          summary: Replication lag status check
                        expr: kube_statefulset_status_replicas_available{statefulset=~".+",
                          namespace=~"vshn-postgresql-.+"} != kube_statefulset_replicas{statefulset=~".+",namespace=~"vshn-postgresql-.+"}
                        for: 5m
                        labels:
                          severity: critical
                          syn_team: schedar
          providerConfigRef:
            name: kubernetes
      name: prometheusrule
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-prometheusrule'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: networking.k8s.io/v1
              kind: NetworkPolicy
              metadata: {}
              spec:
                ingress:
                  - from:
                      - namespaceSelector:
                          matchLabels:
                            kubernetes.io/metadata.name: ''
                      - namespaceSelector:
                          matchLabels:
                            kubernetes.io/metadata.name: appcat-slos
                podSelector: {}
                policyTypes:
                  - Ingress
          providerConfigRef:
            name: kubernetes
      name: network-policy
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.networkPolicyConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-network-policy'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: allow-from-claim-namespace-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.spec.ingress[0].from[0].namespaceSelector.matchLabels[kubernetes.io/metadata.name]
          type: FromCompositeFieldPath
  writeConnectionSecretsToNamespace: syn-crossplane
