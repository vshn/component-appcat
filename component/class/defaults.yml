parameters:
  appcat:
    charts:
      redis:
        source: https://charts.bitnami.com/bitnami
        version: 17.7.1
      mariadb:
        source: https://charts.bitnami.com/bitnami
        version: 10.1.3
      minio:
        source: https://charts.min.io
        version: 5.0.13
    images:
      provider-kubernetes:
        registry: xpkg.upbound.io
        repository: crossplane-contrib/provider-kubernetes
        tag: v0.9.0
      provider-helm:
        registry: xpkg.upbound.io
        repository: crossplane-contrib/provider-helm
        tag: v0.15.0
      provider-exoscale:
        registry: ghcr.io
        repository: vshn/provider-exoscale/provider
        tag: v0.10.4
      provider-cloudscale:
        registry: ghcr.io
        repository: vshn/provider-cloudscale/provider
        tag: v0.5.0
      provider-minio:
        registry: ghcr.io
        repository: vshn/provider-minio/provider
        tag: v0.1.0
      sloth:
        registry: ghcr.io
        image: slok/sloth
        tag: v0.11.0
      statefulSetResizer:
        registry: quay.io
        repository: vshn/statefulset-resize-controller
        tag: v0.3.0
      appcat:
        registry: ghcr.io
        repository: vshn/appcat
        tag: v4.45.2
      apiserver:
        registry: ghcr.io
        repository: vshn/appcat-apiserver
        tag: v0.1.4
      functionAppcat:
        registry: ${appcat:images:appcat:registry}
        repository: ${appcat:images:appcat:repository}
        tag: ${appcat:images:appcat:tag}-func
      functionpnt:
        registry: xpkg.upbound.io
        repository: crossplane-contrib/function-patch-and-transform
        tag: v0.1.4
      reporting:
        registry: ghcr.io
        repository: appuio/appuio-reporting
        tag: v0.1.1

    =_crd_version: ${appcat:images:appcat:tag}

    namespace: syn-appcat
    namespaceLabels: {}
    namespaceAnnotations: {}
    crossplaneNamespace: ${crossplane:namespace}

    appuioManaged: true
    quotasEnabled: false
    grpcEndpoint: host.docker.internal:9443

    billing:
      namespace: ${appcat:namespace}
      tenantID: ${cluster:tenant}
      instanceUOM: uom_uom_45_1e112771
      enableMockOrgInfo: false
      salesOrder: "" # TODO: Update once the fact is available in Leutenant
      vshn:
        # The reporting for VSHN service should only run on APPUiO Cloud LPG2
        enableCronjobs: false
        schedule: 30 * * * *
        # Deploy metering prometheus rules
        meteringRules: false
      monitoring:
        enabled: true
        alerts:
          APPUiOReportingDatabaseBackfillingFailed:
            enabled: true
            rule:
              annotations:
                description: AppCat Reporting backfilling metrics into Odoo failed
                message: AppCat Reporting backfilling metrics into Odoo failed.
                runbook_url: TBD
                summary: AppCat Reporting backfilling metrics into Odoo failed.
              expr: |
                kube_job_failed{job="kube-state-metrics",namespace="${appcat:namespace}",job_name=~"backfill-.*"} > 0
              for: 10m
              labels:
                severity: warning
                syn_team: schedar
      network_policies:
        target_namespaces: {}
      prometheus:
        url: http://vshn-appuio-mimir-query-frontend.vshn-appuio-mimir.svc:8080/prometheus
        org_id: appuio-cloud-metering-c-appuio-cloudscale-lpg-2|appuio-cloud-metering-c-appuio-exoscale-ch-gva-2-0
      odoo:
        url: "https://test.central.vshn.ch/api/v2/product_usage_report_POST"
        oauth:
          url: "https://test.central.vshn.ch/api/v2/authentication/oauth2/token"
          clientID: "?{vaultkv:${cluster:tenant}/${cluster:name}/billing-collector-cloudservices/odoo-oauth-client-id}"
          clientSecret: "?{vaultkv:${cluster:tenant}/${cluster:name}/billing-collector-cloudservices/odoo-oauth-client-secret}"

    defaultRestoreRoleRules:
      - apiGroups:
          - vshn.appcat.vshn.io
        resources:
          - "*"
        verbs:
          - get
      - apiGroups:
          - "k8up.io"
        resources:
          - snapshots
        verbs:
          - get
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
          - create
          - delete
      - apiGroups:
          - apps
        resources:
          - statefulsets/scale
        verbs:
          - update
          - patch
      - apiGroups:
          - apps
        resources:
          - statefulsets
        verbs:
          - get
      - apiGroups:
          - batch
        resources:
          - jobs
        verbs:
          - get
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - get
          - create
          - patch
    controller:
      enabled: false
      namespace: ${appcat:namespace}
      namespaceLabels: ${appcat:namespaceLabels}
      namespaceAnnotations: ${appcat:namespaceAnnotations}
      quotasEnabled: ${appcat:quotasEnabled}
      extraArgs: []
      extraEnv: {}
      tls:
        certSecretName: webhook-cert
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 200m
          memory: 200Mi

    stsResizer:
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 250m
          memory: 200Mi

    apiserver:
      enabled: false
      namespace: ${appcat:namespace}
      namespaceLabels: ${appcat:namespaceLabels}
      namespaceAnnotations: ${appcat:namespaceAnnotations}
      env:
        APPCAT_HANDLER_ENABLED: "true"
        VSHN_POSTGRES_BACKUP_HANDLER_ENABLED: "false"
        VSHN_REDIS_BACKUP_HANDLER_ENABLED: "false"
        VSHN_MARIADB_BACKUP_HANDLER_ENABLED: "false"
      extraArgs: []
      extraEnv: {}
      apiservice:
        insecureSkipTLSVerify: false
      tls:
        certSecretName: appcat-apiserver-tls
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 200m
          memory: 200Mi

    slos:
      enabled: true
      alertsEnabled: true
      uptimeDefaults:
        objective: 99.9
        alerting:
          page_alert:
            # This should reduce non actionable alerts because of single instance restarts.
            # The page alert looks (ammong other things) at the burn rate over the last 5min.
            # If the alert is pending for more than 5m this indicates a real problem.
            for: 6m
          ticket_alert: {}
      namespace: appcat-slos
      namespaceLabels: ${appcat:namespaceLabels}
      namespaceAnnotations: ${appcat:namespaceAnnotations}
      sla_reporter:
        enabled: false
        resources:
          requests:
            cpu: 10m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 300Mi
        # 09:00 on the first of the month
        schedule: "0 9 1 * *"
        bucket_region: lpg
        slo_mimir_svc: vshn-appuio-mimir-query-frontend
        slo_mimir_namespace: vshn-appuio-mimir
        mimir_organization: appuio-managed-openshift-metrics
      sli_exporter:
        resources:
          requests:
            cpu: 10m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 300Mi
        kustomize_input:
          namespace: ${appcat:slos:namespace}
      alerting:
        labels:
          syn: "true"
          syn_team: schedar
          syn_component: appcat
          slo: "true"
        page_labels:
          severity: "critical"
        ticket_labels:
          severity: "warning"
      vshn:
        PostgreSQL:
          uptime: ${appcat:slos:uptimeDefaults}
        Redis:
          uptime: ${appcat:slos:uptimeDefaults}
        Minio:
          uptime: ${appcat:slos:uptimeDefaults}
        MariaDB:
          uptime: ${appcat:slos:uptimeDefaults}

    providers:
      cloudscale:
        enabled: false
        connectionSecretNamespace: syn-provider-cloudscale-secrets
        namespace: ${crossplane:namespace}
        credentials:
          name: cloudscale-api-token
          namespace: ${crossplane:namespace}
          data:
            CLOUDSCALE_API_TOKEN: "?{vaultkv:${cluster:tenant}/${cluster:name}/appcat/objectstorage/provider-cloudscale/token}"
        spec:
          package: ${appcat:images:provider-cloudscale:registry}/${appcat:images:provider-cloudscale:repository}:${appcat:images:provider-cloudscale:tag}
        runtimeConfig:
          serviceAccountName: provider-cloudscale
        providerConfig: {}

      exoscale:
        enabled: false
        connectionSecretNamespace: syn-provider-exoscale-secrets
        namespace: ${crossplane:namespace}
        credentials:
          name: exoscale-api-access
          namespace: ${crossplane:namespace}
          data:
            EXOSCALE_API_KEY: "?{vaultkv:${cluster:tenant}/${cluster:name}/appcat/provider-exoscale/access-key}"
            EXOSCALE_API_SECRET: "?{vaultkv:${cluster:tenant}/${cluster:name}/appcat/provider-exoscale/secret-key}"
        spec:
          package: ${appcat:images:provider-exoscale:registry}/${appcat:images:provider-exoscale:repository}:${appcat:images:provider-exoscale:tag}
        runtimeConfig:
          serviceAccountName: provider-exoscale
        providerConfig: {}

      kubernetes:
        enabled: false
        namespace: ${crossplane:namespace}
        spec:
          package: ${appcat:images:provider-kubernetes:registry}/${appcat:images:provider-kubernetes:repository}:${appcat:images:provider-kubernetes:tag}
        runtimeConfig:
          serviceAccountName: provider-kubernetes
        providerConfig: {}

      helm:
        enabled: false
        namespace: ${crossplane:namespace}
        spec:
          package: ${appcat:images:provider-helm:registry}/${appcat:images:provider-helm:repository}:${appcat:images:provider-helm:tag}
        runtimeConfig:
          serviceAccountName: provider-helm
        providerConfig: {}

      minio:
        enabled: false
        namespace: ${crossplane:namespace}
        spec:
          package: ${appcat:images:provider-minio:registry}/${appcat:images:provider-minio:repository}:${appcat:images:provider-minio:tag}
        runtimeConfig:
          serviceAccountName: provider-minio
        providerConfigRefs: []
        additionalProviderConfigs: []

    services:
      # Used for deploying jobs
      controlNamespace: "syn-appcat-control"
      vshn:
        enabled: false
        externalDatabaseConnectionsEnabled: "false"
        e2eTests: false
        quotasEnabled: ${appcat:quotasEnabled}
        secretNamespace: ${crossplane:namespace}
        emailAlerting:
          enabled: false
          smtpHost: "smtp.eu.mailgun.org:465"
          smtpUsername: myuser@example.com
          smtpPassword: "?{vaultkv:__shared__/__shared__/mailgun/smtp_password}"
          smtpFromAddress: myuser@example.com
          secretNamespace: syn-appcat
          secretName: mailgun-smtp-credentials
        stsResizer:
          enabled: true
        postgres:
          billing: true
          # bucket_region: 'lpg' || 'ch-gva-2'
          bucket_region: ""
          # bucket_endpoint: 'https://objects.lpg.cloudscale.ch' || 'https://sos-ch-gva-2.exo.io'
          bucket_endpoint: ""
          enabled: true
          grpcEndpoint: ${appcat:grpcEndpoint}
          proxyFunction: false
          enableNetworkPolicy: true
          secretNamespace: ${appcat:services:vshn:secretNamespace}
          sgNamespace: syn-stackgres-operator
          defaultPlan: standard-2
          sla: 99.25
          plans:
            standard-2:
              size:
                enabled: true
                cpu: "400m"
                memory: "1728Mi"
                disk: 20Gi
            standard-4:
              size:
                enabled: true
                cpu: "900m"
                memory: "3776Mi"
                disk: 40Gi
            standard-8:
              size:
                enabled: true
                cpu: "1900m"
                memory: "7872Mi"
                disk: 80Gi
          sideCars:
            createBackup:
              requests:
                cpu: "100m"
                memory: "64Mi"
              limits:
                cpu: "400m"
                memory: "500Mi"
            clusterController:
              requests:
                cpu: "32m"
                memory: "30Mi"
              limits:
                cpu: "32m"
                memory: "2Gi"
            runDbops:
              requests:
                cpu: "100m"
                memory: "64Mi"
              limits:
                cpu: "250m"
                memory: "256Mi"
            setDbopsResult:
              requests:
                cpu: "100m"
                memory: "64Mi"
              limits:
                cpu: "250m"
                memory: "256Mi"
            envoy:
              requests:
                cpu: "32m"
                memory: "64Mi"
              limits:
                cpu: "64m"
                memory: "64Mi"
            pgbouncer:
              requests:
                cpu: "16m"
                memory: "4Mi"
              limits:
                cpu: "32m"
                memory: "20Mi"
            postgresUtil:
              requests:
                cpu: "10m"
                memory: "4Mi"
              limits:
                cpu: "20m"
                memory: "20Mi"
            prometheusPostgresExporter:
              requests:
                cpu: "10m"
                memory: "16Mi"
              limits:
                cpu: "150m"
                memory: "256Mi"
          initContainers:
            pgbouncerAuthFile:
              requests:
                cpu: "100m"
                memory: "100Mi"
              limits:
                cpu: "300m"
                memory: "500Mi"
            relocateBinaries:
              requests:
                cpu: "100m"
                memory: "100Mi"
              limits:
                cpu: "300m"
                memory: "500Mi"
            setupScripts:
              requests:
                cpu: "100m"
                memory: "500Mi"
              limits:
                cpu: "300m"
                memory: "500Mi"
            setupArbitraryUser:
              requests:
                cpu: "100m"
                memory: "500Mi"
              limits:
                cpu: "300m"
                memory: "500Mi"
            clusterReconciliationCycle:
              requests:
                cpu: "100m"
                memory: "100Mi"
              limits:
                cpu: "300m"
                memory: "200Mi"
            setDbopsRunning:
              requests:
                cpu: "250m"
                memory: "256Mi"
              limits:
                cpu: "250m"
                memory: "256Mi"
        redis:
          billing: true
          enabled: true
          enableNetworkPolicy: true
          secretNamespace: ${appcat:services:vshn:secretNamespace}
          helmChartVersion: ${appcat:charts:redis:version}
          imageRegistry: ""
          bucket_region: "lpg"
          grpcEndpoint: ${appcat:grpcEndpoint}
          proxyFunction: false
          defaultPlan: standard-1
          sla: 99.25
          plans:
            standard-512m:
              size:
                enabled: true
                cpu: "125m"
                memory: "512Mi"
                disk: 16Gi
            standard-1:
              size:
                enabled: true
                cpu: "250m"
                memory: "1Gi"
                disk: 16Gi
            standard-2:
              size:
                enabled: true
                cpu: "500m"
                memory: "2Gi"
                disk: 16Gi
            standard-4:
              size:
                enabled: true
                cpu: "1"
                memory: "4Gi"
                disk: 16Gi
            standard-8:
              size:
                enabled: true
                cpu: "2"
                memory: "8Gi"
                disk: 16Gi
        minio:
          billing: true
          enabled: false
          enableNetworkPolicy: true
          secretNamespace: ${appcat:services:vshn:secretNamespace}
          helmChartVersion: ${appcat:charts:minio:version}
          grpcEndpoint: ${appcat:grpcEndpoint}
          proxyFunction: false
          defaultPlan: standard-1
          sla: 99.25
          plans:
            standard-1:
              size:
                enabled: true
                cpu: "1"
                memory: "1Gi"
                disk: 50Gi
          instances: []
        services:
          mariadb:
            serviceName: VSHNMariaDB
            connectionSecretKeys:
              - ca.crt
              - MARIADB_HOST
              - MARIADB_PORT
              - MARIADB_USERNAME
              - MARIADB_PASSWORD
              - MARIADB_URL
            mode: standalone
            offered: true
            enabled: false
            restoreSA: mariadbrestoreserviceaccount
            restoreRoleRules: ${appcat:defaultRestoreRoleRules}
            openshiftTemplate:
              serviceName: mariadbbyvshn
              description: "The open source relational database management system (DBMS) that is a compatible drop-in replacement for the widely used MySQL database technology"
              message: 'Your MariaDB by VSHN instance is being provisioned, please see \${SECRET_NAME} for access.'
              url: https://vs.hn/vshn-mariadb
              tags: "database,sql,mariadb"
              icon: "icon-mariadb"
              defaultVersion: "11.2"
            enableNetworkPolicy: false
            secretNamespace: ${appcat:services:vshn:secretNamespace}
            helmChartVersion: ${appcat:charts:mariadb:version}
            imageRegistry: ""
            bucket_region: "lpg"
            grpcEndpoint: ${appcat:grpcEndpoint}
            proxyFunction: false
            defaultPlan: standard-1
            sla: 99.25
            plans:
              standard-512m:
                size:
                  enabled: true
                  cpu: "125m"
                  memory: "512Mi"
                  disk: 16Gi
              standard-1:
                size:
                  enabled: true
                  cpu: "250m"
                  memory: "1Gi"
                  disk: 16Gi
              standard-2:
                size:
                  enabled: true
                  cpu: "500m"
                  memory: "2Gi"
                  disk: 16Gi
              standard-4:
                size:
                  enabled: true
                  cpu: "1"
                  memory: "4Gi"
                  disk: 16Gi
              standard-8:
                size:
                  enabled: true
                  cpu: "2"
                  memory: "8Gi"
                  disk: 16Gi

      # Config for exoscale composites
      exoscale:
        enabled: false
        secretNamespace: ${crossplane:namespace}
        providerSecretNamespace: ${appcat:providers:exoscale:connectionSecretNamespace}
        mysql:
          enabled: true
          secretNamespace: ${appcat:services:exoscale:secretNamespace}
          providerSecretNamespace: ${appcat:services:exoscale:providerSecretNamespace}
        postgres:
          enabled: true
          secretNamespace: ${appcat:services:exoscale:secretNamespace}
          providerSecretNamespace: ${appcat:services:exoscale:providerSecretNamespace}
        redis:
          enabled: true
          secretNamespace: ${appcat:services:exoscale:secretNamespace}
          providerSecretNamespace: ${appcat:services:exoscale:providerSecretNamespace}
        kafka:
          enabled: true
          secretNamespace: ${appcat:services:exoscale:secretNamespace}
          providerSecretNamespace: ${appcat:services:exoscale:providerSecretNamespace}
        opensearch:
          enabled: true
          secretNamespace: ${appcat:services:exoscale:secretNamespace}
          providerSecretNamespace: ${appcat:services:exoscale:providerSecretNamespace}

      # Config for "generic" vendor agnositc composites that have more than one matching composition
      generic:
        objectstorage:
          enabled: false

          defaultComposition: ${facts:cloud}
          # Compositions that provide a composition for the composite with it's configuration
          compositions:
            exoscale:
              enabled: true
              secretNamespace: ${appcat:services:generic:objectstorage:secretNamespace}
              providerSecretNamespace: ${appcat:providers:exoscale:connectionSecretNamespace}
            cloudscale:
              enabled: true
              secretNamespace: ${appcat:services:generic:objectstorage:secretNamespace}
              providerSecretNamespace: ${appcat:providers:cloudscale:connectionSecretNamespace}
            minio:
              enabled: false
              secretNamespace: ${appcat:services:generic:objectstorage:secretNamespace}
              providerSecretNamespace: ${appcat:providers:cloudscale:connectionSecretNamespace}
              grpcEndpoint: ${appcat:grpcEndpoint}
              proxyFunction: false
              providerConfig: minio

          # Generic config for objecstorage composite
          secretNamespace: ${crossplane:namespace}
