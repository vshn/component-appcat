classes:
  - .common

parameters:
  pkg.appcat.composition.objectstorage.cloudscale:
    secretNamespaces:
      objectsusers: syn-provider-cloudscale-secrets
    bucketDeletionPolicy: DeleteAll

  appcat:
    compositions:
      "cloudscale.objectbuckets.appcat.vshn.io":
        commonPatchSets:
          annotations: {}
          labels: {}
        spec:
          compositeTypeRef:
            apiVersion: appcat.vshn.io/v1
            kind: XObjectBucket
          writeConnectionSecretsToNamespace: ${crossplane:namespace}
          resources:

            - base:
                apiVersion: cloudscale.crossplane.io/v1
                kind: ObjectsUser
                metadata: {} # patched
                spec:
                  forProvider:
                    displayName: "" # patched
                    tags:
                      namespace: # patched
                      tenant: # patched
                  writeConnectionSecretToRef:
                    name: ""
                    namespace: ${pkg.appcat.composition.objectstorage.cloudscale:secretNamespaces:objectsusers}
                  providerConfigRef:
                    name: cloudscale
              connectionDetails:
                - fromConnectionSecretKey: AWS_ACCESS_KEY_ID
                  type: FromConnectionSecretKey
                  name: AWS_ACCESS_KEY_ID
                - fromConnectionSecretKey: AWS_SECRET_ACCESS_KEY
                  type: FromConnectionSecretKey
                  name: AWS_SECRET_ACCESS_KEY
              patches:
                - type: PatchSet
                  patchSetName: annotations
                - type: PatchSet
                  patchSetName: labels
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: metadata.name
                - type: ToCompositeFieldPath
                  fromFieldPath: status.conditions
                  toFieldPath: status.accessUserConditions
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: spec.writeConnectionSecretToRef.name
                # Set display name
                - type: CombineFromComposite
                  toFieldPath: spec.forProvider.displayName
                  combine:
                    variables:
                      - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
                      - fromFieldPath: metadata.labels[crossplane.io/claim-name]
                    strategy: string
                    string:
                      fmt: "%s.%s"

            - base:
                apiVersion: cloudscale.crossplane.io/v1
                kind: Bucket
                metadata: {} # patched
                spec:
                  forProvider:
                    bucketName: ""
                    # Note: We cannot use the connection Secret that is created by Crossplane (it has a name that matches the metadata.uid)
                    # Reason: Upon deleting a claim, the connection secret gets deleted already, without it we can't delete the bucket and we'd be stuck.
                    # That is why we need a duplicate secret that the provider-cloudscale manages (and not crossplane).
                    credentialsSecretRef:
                      name: ""
                      namespace: ${pkg.appcat.composition.objectstorage.cloudscale:secretNamespaces:objectsusers}
                    endpointURL: ""
                    region: ""
                    bucketDeletionPolicy: ${pkg.appcat.composition.objectstorage.cloudscale:bucketDeletionPolicy}
              connectionDetails:
                - fromFieldPath: status.endpoint
                  type: FromFieldPath
                  name: ENDPOINT
                - fromFieldPath: status.endpointURL
                  type: FromFieldPath
                  name: ENDPOINT_URL
                - fromFieldPath: spec.forProvider.region
                  type: FromFieldPath
                  name: AWS_REGION
                - fromFieldPath: status.atProvider.bucketName
                  type: FromFieldPath
                  name: BUCKET_NAME
              patches:
                - type: PatchSet
                  patchSetName: annotations
                - type: PatchSet
                  patchSetName: labels
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: metadata.name
                - type: ToCompositeFieldPath
                  fromFieldPath: status.conditions
                  toFieldPath: status.bucketConditions
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.bucketName
                  toFieldPath: spec.forProvider.bucketName
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: spec.forProvider.credentialsSecretRef.name
                # Set region
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.region
                  toFieldPath: spec.forProvider.region
                  transforms:
                    # The Map transformation ensures we use only supported regions by cloudscale.
                    # Any other values result in an error.
                    - type: map
                      map:
                        rma: rma
                        lpg: lpg
